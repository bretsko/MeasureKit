
import XCTest
import Quick
import Nimble
import MeasureKit


class DurationSpec: QuickSpec {
    override func spec() {
        
        describe("DurationMUnit") {
            
            it("can print duration in any style") {
                
                
                //TODO: make tests to detect if CountryLIDs contain any new values in addition to LangLIDs !
                
                let m = 5.hours
                
                //print("---- LangLID cases -----")
                
                
                let langLIDCases: Set<Str> = LangLID.allForms.map { lid in
                    
                    let format = MeasureFormat(unitStyle: .long ,
                                               numFormat: .spellOut, lid.lid)
                    return m.measure(format).str
                }.compactMap{$0}.set
                
                //print("---- CountryLID cases -----")
                
                let countryLIDCases: Set<Str> = CountryLID.allForms.map { lid in
                    
                    let format = MeasureFormat(unitStyle: .long ,
                                               numFormat: .spellOut, lid.lid)
                    return m.measure(format).str
                }.compactMap{$0}.set
                
                let overlappingCases = langLIDCases.intersection(countryLIDCases)
                expect(overlappingCases.len).to(equal(0))
                print(overlappingCases.array.joined)
                
                //TODO: uses this list for inter -> many locales are actually equivalent !
                // All overlapping cases between
                // 5 —Å–∞—Ç–∏ 5 ’™’°’¥ 5 —á–∞—Å–æ–≤ 5 ore 5 ‡∞ó‡∞Ç‡∞ü‡∞≤‡±Å €µ ⁄ØŸ≤ŸÜŸπ€ÅŸï 5 œéœÅŒµœÇ 5 heures 5 oere 5 oras 5 timmar 5 awr 5 ·É°·Éê·Éê·Éó·Éò 5 ⁄Ø⁄æŸÜŸπ€í 5 St√ºnnen 5 ‡∫ä‡∫ª‡ªà‡∫ß‡ªÇ‡∫°‡∫á 5 h√°wa 5 stunde 5 —Ü–∞–≥ 5 —Å–∞—Ç 5 valandos 5 tuntia 5 horas 5 or√´ 5 uairean 5 timer 5 ÿ¨ŸÖ 5 h ‡º• ‡ΩÜ‡Ω¥‡ºã‡Ωö‡Ωº‡Ωë‡ºã 5 soat 5 godzin 5 ordu 5 –≥–æ–¥–∏–Ω 5 uras 5 √≥ra 5 saet 5 sati 5 jam 5 ‡≤ó‡≤Ç‡≤ü‡≥Ü‡≤ó‡≤≥‡≥Å 5 —á–∞–∞—Å 5 Ow√°p»üe 5 hod√≠n ‡•´ h 5 t√≠mar 5 hod≈∫inow 5 oris ‡ß´ h 5 ga∆ío∆ío 5 —Å–æ–∞—Ç 5 Schtunde 5 ‡¥Æ‡¥£‡¥ø‡¥ï‡µç‡¥ï‡µÇ‡µº 5 ‡¨ò‡¨£‡≠ç‡¨ü‡¨æ ‡•´ ‡§§‡§æ‡§∏ 5 ·ûò·üâ·üÑ·ûÑ 5 hola 5 saat 5 ÿ≥ÿßÿ¶€ïÿ™ 5 eur 5 hores 5 ‡™ï‡™≤‡™æ‡™ï 5 —Å–∞—Ö–∞—Ç—ã 5 amahora 5 –≥–∞–¥–∑—ñ–Ω ·ÅÖ ·Äî·Ä¨·Äõ·ÄÆ 5 ‡∂¥‡∑ê‡∂∫ 5 Â∞èÊó∂ 5 ·é¢·è≥·èü·é∂·èì ‡ß´ ‡¶ò‡¶£‡ßç‡¶ü‡¶æ 5 —Å–∞—Ö—å—Ç 5 uur 5 sagat 5 ·à∞·ãì·â∂·âΩ 5 hodin 5 —Å–∞–∞—Ç 5 diibmur 5 ur 5 ‡®ò‡©∞‡®ü‡©á 5 Â∞èÊôÇ 5 ‡ÆÆ‡Æ£‡Æø‡Æ®‡Øá‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øç 5 hours 5 timar 5 gi·ªù Ÿ• ⁄™ŸÑÿß⁄™ 5 ◊©◊¢◊ï◊™ Ÿ• h ‡ß´ ‡¶ò‡¶®‡ßç‡¶ü‡¶æ 5 g√≥≈∫inow 5 huaire 5 saa 5 saacadood 5 ora €µ ÿ≥ÿßÿπŸêÿ™ 5 ‡§ò‡§Ç‡§ü‡•á 5 tundi ëÑª ëÑäëÑßëÑöëÑ¥ëÑò 5 stundas €µ h 5 Stunden 5 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á 5 klukkustundir 5 Tuki Ÿ• ÿ≥ÿßÿπÿßÿ™ 5 —Å–∞“ì–∞—Ç ‡•´ ‡§ò‡§£‡•ç‡§ü‡§æ 5 Stonnen €µ ÿ≥ÿßÿπÿ™ ·±ï h 5 —á–∞—Å–∞
                
                // All failing cases
                //zh-Hant_HK zh-Hant zh_MO ko_KR zh_CN zh-Hans_CN wuu to_TO zh zh-Hant_MO zh-Hans_SG zh_SG zh_HK zh_TW zh-Hans_HK ja_JP zh_Hant_TW to zh-Hans_MO ko zh-Hant_CN ko_KP ja zh-Hans
                
                //                let diff1 = langLIDCases.subtracting(countryLIDCases)
                //                expect(diff1.isEmpty).to(beTrue())
                //                print(diff1.array.joined)
                //                //wuu to ja ko zh-Hant zh zh-Hans
                //
                //                let diff2 = countryLIDCases.subtracting(langLIDCases)
                //                expect(diff2.isEmpty).to(beTrue())
                //                print(diff2.array.joined)
                //zh_MO zh_HK zh-Hans_MO ja_JP zh_Hant_TW ko_KR zh-Hant_HK zh-Hant_CN zh-Hans_SG to_TO ko_KP zh_TW zh-Hans_HK zh_CN zh_SG zh-Hant_MO zh-Hans_CN
            }
            
            
            //            it("can print duration in any style") {
            //
            //
            //                //TODO: make tests to detect if CountryLIDs contain any new values in addition to LangLIDs !
            //
            //                let m = 5.hours
            //
            //
            //                print("---- Failed LangLID cases -----")
            //
            //                let langLIDFormats: Set<MeasureFormat> = LangLID.allForms.lids.map {
            //                    MeasureFormat(unitStyle: .long ,
            //                                  numFormat: .spellOut, $0)
            //                }.set
            //                let langLIDCases: Set<Str> = langLIDFormats.map {
            //                    let meas = m.measure($0)
            //                    if let str = meas.str {
            //                        return str
            //                    } else {
            //                        print(meas.locale)
            //                        return nil
            //                    }
            //                }.compactMap{$0}.set
            //                //ko (fixed)
            //                //zh-Hant (fixed)
            //                //to (fixed)
            //                //ja (fixed)
            //                //zh-Hans (fixed)
            //                //zh (fixed)
            //                //wuu (fixed)
            //
            //                print("---- Failed CountryLID cases -----")
            //
            //                let countryLIDFormats: Set<MeasureFormat> = CountryLID.allForms.lids.map {
            //                    MeasureFormat(unitStyle: .long ,
            //                                  numFormat: .spellOut, $0)
            //                }.set
            //                let countryLIDCases: Set<Str> = countryLIDFormats.map {
            //                    let meas = m.measure($0)
            //                    if let str = meas.str {
            //                        return str
            //                    } else {
            //                        print(meas.locale)
            //                        return nil
            //                    }
            //                }.compactMap{$0}.set
            //                //zh-Hans_MO (fixed)
            //                //ko_KP (fixed)
            //                //zh_SG (fixed)
            //                //zh_TW (fixed)
            //                //zh_HK (fixed)
            //                //zh_CN (fixed)
            //                //zh_TW (fixed)
            //                //zh_SG (fixed)
            //                //ko_KR (fixed)
            //                //zh_CN (fixed)
            //                //zh_MO (fixed)
            //                //ja_JP (fixed)
            //                //zh_MO (fixed)
            //                //zh-Hans_HK (fixed)
            //                //zh-Hant_CN (fixed)
            //                //to_TO (fixed)
            //                //zh_HK (fixed)
            //
            //
            //                let diff1 = langLIDCases.subtracting(countryLIDCases)
            //                expect(diff1.isEmpty).to(beTrue())
            //                print(diff1.array.joined)
            //
            //                let diff2 = countryLIDCases.subtracting(langLIDCases)
            //                expect(diff2.isEmpty).to(beTrue())
            //                print(diff2.array.joined)
            //            }
            
            
            //            it("can print duration in any style") {
            //
            //                var format = MeasureFormat(unitStyle: .long ,
            //                                           numFormat: .spellOut, .english)
            //
            //                print(m.measure(format).str)
            //
            //                format.localeID = .englishUS
            //                print(m.measure(format).str)
            
            //                m.unitStyle = .medium
            //                print(m.str)
            //
            //                m.unitStyle = .long
            //                print(m.str)
            //}
            
            
            
            //            it("can print duration in 3 styles") {
            //
            //                let format = MeasureFormat(unitStyle: .long,
            //                                           numFormat: .spellOut,
            //                                           .ukrainian)
            //
            //                // format is ignored here (currently) !
            //                let fmtr = MeasureFormatter.shared()
            //
            //                let m1 = 5.seconds.measure(format)
            //                let m2 = 5.hours.measure(format)
            //                let m3 = 5.minutes.measure(format)
            //
            //                let str1 = fmtr.string(from: m1)
            //                let str2 = fmtr.string(from: m2)
            //                let str3 = fmtr.string(from: m3)
            //
            //                let result1 = "–ø º—è—Ç—å —Å–µ–∫—É–Ω–¥"
            //                let result2 = "–ø º—è—Ç—å –≥–æ–¥–∏–Ω"
            //                let result3 = "–ø º—è—Ç—å —Ö–≤–∏–ª–∏–Ω"
            //                expect(str1).to(equal(result1))
            //                expect(str2).to(equal(result2))
            //                expect(str3).to(equal(result3))
            //
            ////                let munit = DurationMUnit.seconds.munit
            //                //let str = munit.allStrs(format.unitFormat)
            //                //print(str)
            //
            //                let _ = Measure(result1,
            //                                min:1,
            //                                max:5,
            //                                step:1,
            //                                possibleUnits: Set([DurationMUnit.seconds.munit]),
            //                                format)!
            //                let _ = Measure(result2,
            //                                possibleUnits: Set([DurationMUnit.hours.munit]),
            //                                format)!
            //                let _ = Measure(result3,
            //                                possibleUnits: Set([DurationMUnit.minutes.munit]),
            //                                format)!
            //            }
        }
    }
}
